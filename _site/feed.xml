<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title></title>
		<description>Bhushan Vinod Authankar</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Ruby conditional statements</title>
				<description>&lt;p&gt;Ruby offers conditional statements which are pretty common to modern languages. Conditional statements are used when you want to execute one of many blocks of code.&lt;/p&gt;

&lt;h4 id=&quot;ruby-ifelse&quot;&gt;Ruby &lt;em&gt;if..else&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;When you want to execute one of two code blocks depending on only one condition, the &lt;em&gt;if…else&lt;/em&gt; is the good choice.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the condition is true then ‘code block 1’ will get executed otherwise ‘code block 2’ will get executed.&lt;br /&gt;
Chaining of conditions is possible with &lt;em&gt;if..elsif..else&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition2&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If condition1 is false condition2 will be checked for truthness otherwise else block will be executed.&lt;br /&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;   
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x is less than 2&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x is equal to 2&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x is greater than 2&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Output for the snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x is equal to 2   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;ruby-if&quot;&gt;Ruby &lt;em&gt;if&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;When you don’t have the else block what then?. Ruby has the one line solution.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;code&lt;/em&gt; executes only if condition is true.&lt;br /&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TRUE&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Output for the snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TRUE   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;ruby-unless&quot;&gt;Ruby &lt;em&gt;unless&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;unless&lt;/em&gt; has different behavior.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the condition is &lt;em&gt;true&lt;/em&gt; ‘code block 2’ gets executed.&lt;br /&gt;
‘code block 1’ gets executed when the condition is false.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;code&lt;/em&gt; gets executed when condition is false.&lt;/p&gt;

&lt;h4 id=&quot;ruby-case&quot;&gt;Ruby &lt;em&gt;case&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;When you have lots of conditions to check using &lt;em&gt;if..elsif..else&lt;/em&gt; is not a good idea. In that case &lt;em&gt;case&lt;/em&gt; is good choice.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When expression match expression1 ‘code block 1’ gets executed.&lt;br /&gt;
When matches with expression2 ‘code block 2’ gets executed. &lt;br /&gt;
If does not match with ‘code block 3’ gers executed.&lt;br /&gt;
The above code is same as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  
&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Between 1 to 5&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Between 6 to 10&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Greater than 10&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Output for the snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Between 6 to 10    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
				<pubDate>Fri, 12 Aug 2016 00:00:00 +0530</pubDate>
				<link>/2016/08/12/conditional-statements-ruby.html</link>
				<guid isPermaLink="true">/2016/08/12/conditional-statements-ruby.html</guid>
			</item>
		
			<item>
				<title>Ruby Style Iteration</title>
				<description>&lt;p&gt;Iterators are the methods supported by &lt;em&gt;collections&lt;/em&gt;. Collections are the objects which store data. In Ruby, &lt;em&gt;Arrays&lt;/em&gt; and &lt;em&gt;Hashes&lt;/em&gt; are the collections. Iterators are used to traverse collection and get the value one after another.&lt;br /&gt;
Let’s go through some iterators in ruby.&lt;/p&gt;

&lt;h4 id=&quot;ruby-each&quot;&gt;Ruby &lt;em&gt;each&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;The each iterator returns all the values/elements of collection.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here the collection could be &lt;em&gt;Array&lt;/em&gt; or &lt;em&gt;Hash&lt;/em&gt;. &lt;em&gt;code&lt;/em&gt; will get executed for every element in the collection.&lt;br /&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Output for the snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1  
2  
3  
4  
5  
=&amp;gt; [1, 2, 3, 4, 5]   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Ruby has some variations in &lt;em&gt;each&lt;/em&gt; :&lt;br /&gt;
&lt;strong&gt;Ruby &lt;em&gt;each_index&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
This returns all the positions of the collection in order.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;code&lt;/em&gt; gets executed for every index in the collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby &lt;em&gt;each_with_index&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
This returns the element and its postion from the collection.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!-- _element_ is the element in the collection and _index_ is its index. --&gt;

&lt;h4 id=&quot;ruby-map&quot;&gt;Ruby &lt;em&gt;map&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Ruby &lt;em&gt;map&lt;/em&gt; is another iterator used to go through the collection. Whenever you want to alter the values of collection, &lt;em&gt;map&lt;/em&gt; is the good choice.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;code&lt;/em&gt; will get executed for every element in the collection.&lt;br /&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Output for the snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1  
2  
3  
4  
5  
=&amp;gt; [nil, nil, nil, nil, nil]   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You might be thinking “What’s the difference between &lt;em&gt;each&lt;/em&gt; and &lt;em&gt;map&lt;/em&gt;, since both do the same thing?”&lt;br /&gt;
Take a look at the last line of output&lt;br /&gt;
For &lt;em&gt;each&lt;/em&gt; it is &lt;code class=&quot;highlighter-rouge&quot;&gt;=&amp;gt; [1, 2, 3, 4, 5]&lt;/code&gt; which is the original array.&lt;br /&gt;
For &lt;em&gt;map&lt;/em&gt; it is &lt;code class=&quot;highlighter-rouge&quot;&gt;=&amp;gt; [nil, nil, nil, nil, nil]&lt;/code&gt; which is the &lt;em&gt;nil&lt;/em&gt; array of same size.&lt;/p&gt;

&lt;p&gt;This &lt;em&gt;map&lt;/em&gt; version does not destroy the original collection. But if you want to change the original collection itself, ruby provides you &lt;em&gt;map!&lt;/em&gt; (map bang)version.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;ruby-collect&quot;&gt;Ruby &lt;em&gt;collect&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;collect&lt;/em&gt; and &lt;em&gt;map&lt;/em&gt;, both work in similar way.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Output for the snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1  
2  
3  
4  
5  
=&amp;gt; [nil, nil, nil, nil, nil]   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This &lt;em&gt;collect&lt;/em&gt; version does not destroy the original collection. But if you want to change the original collection itself ruby provides you &lt;em&gt;collect!&lt;/em&gt; (collect bang)version. (same as map!)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;ruby-inject&quot;&gt;Ruby &lt;em&gt;inject&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;inject&lt;/em&gt; is used to perform some operation on the collection with some initial value in the memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here ‘result’ has the initial as first value of the collection and element is the next value. But if you give some initial value to result as &lt;code class=&quot;highlighter-rouge&quot;&gt;collection.inject(initial_value) do ... end&lt;/code&gt; then element will have the first value from the collection.&lt;/p&gt;

&lt;h4 id=&quot;ruby-reduce&quot;&gt;Ruby &lt;em&gt;reduce&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;reduce&lt;/em&gt; and &lt;em&gt;inject&lt;/em&gt; works the same way.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Output for the snippet :&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt; 
120  
&lt;/code&gt;&lt;br /&gt;
The above snippet multiplies all the elements from the &lt;em&gt;array&lt;/em&gt;.&lt;br /&gt;
If you replace &lt;em&gt;reduce&lt;/em&gt; with &lt;em&gt;inject&lt;/em&gt;, it outputs the same.&lt;/p&gt;
</description>
				<pubDate>Wed, 10 Aug 2016 00:00:00 +0530</pubDate>
				<link>/2016/08/10/ruby-style-iteration.html</link>
				<guid isPermaLink="true">/2016/08/10/ruby-style-iteration.html</guid>
			</item>
		
			<item>
				<title>Loops in Ruby</title>
				<description>&lt;p&gt;Loops are used to execute same block of code again and again for certain number of times or until specific condition is met. Loops in ruby is same as other laguages, but it supports some more functionalities&lt;/p&gt;

&lt;h4 id=&quot;ruby-for-loop&quot;&gt;Ruby &lt;em&gt;for&lt;/em&gt; loop&lt;/h4&gt;
&lt;p&gt;For loop is the most easiest looping statement in the programming. Ruby also supports &lt;em&gt;for&lt;/em&gt; loop, but it has little different syntax.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;   
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Executes code &lt;em&gt;n&lt;/em&gt; times.&lt;/p&gt;

&lt;p&gt;Range in Ruby&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(0..9) # =&amp;gt; 0,1,2,3,4,5,6,7,8,9&lt;/li&gt;
  &lt;li&gt;(0…9) # =&amp;gt; 0,1,2,3,4,5,6,7,8&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ruby-while-loop&quot;&gt;Ruby &lt;em&gt;while&lt;/em&gt; loop&lt;/h4&gt;
&lt;p&gt;While is the another simplest looping technique in programming. Ruby syntax for the while :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Executes code while condtion is &lt;em&gt;true&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Other way to use &lt;em&gt;while&lt;/em&gt; loop&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Executes code while condition is &lt;em&gt;true&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;ruby-dowhile-loop&quot;&gt;Ruby &lt;em&gt;do..while&lt;/em&gt; loop&lt;/h4&gt;
&lt;p&gt;Ruby also supports do..while looping style, but it is little different. It uses &lt;em&gt;begin&lt;/em&gt; and &lt;em&gt;end&lt;/em&gt; code block.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Executes the code while condition is &lt;em&gt;true&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;ruby-until-loop&quot;&gt;Ruby &lt;em&gt;until&lt;/em&gt; loop&lt;/h4&gt;
&lt;p&gt;Until has little different behaviour. Until executes code while condition is false.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Other way to use &lt;em&gt;untiil&lt;/em&gt; loop&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Executes the code while condition is &lt;em&gt;false&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;ruby-times-loop&quot;&gt;Ruby &lt;em&gt;times&lt;/em&gt; loop&lt;/h4&gt;
&lt;p&gt;times in ruby executes code that many number of times.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Executes code &lt;em&gt;n&lt;/em&gt; times.&lt;/p&gt;

&lt;h4 id=&quot;ruby-upto-loop&quot;&gt;Ruby &lt;em&gt;upto&lt;/em&gt; loop&lt;/h4&gt;
&lt;p&gt;upto is another looping technique in ruby.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Executes code &lt;em&gt;n&lt;/em&gt; times.&lt;/p&gt;

&lt;h4 id=&quot;ruby-step-loop&quot;&gt;Ruby &lt;em&gt;step&lt;/em&gt; loop&lt;/h4&gt;
&lt;p&gt;step looping technique is used to skip specific interval every time.&lt;br /&gt;
For example if you want to take second element always you will put 2 instead of skip in the code snippet below. Which is equivalent to doing &lt;code class=&quot;highlighter-rouge&quot;&gt;i+=2&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;ruby-loop-loop&quot;&gt;Ruby &lt;em&gt;loop&lt;/em&gt; loop&lt;/h4&gt;
&lt;p&gt;Loop in ruby another looping technique.&lt;/p&gt;

&lt;h6 id=&quot;uncondition-looping-with-loop&quot;&gt;Uncondition looping with &lt;em&gt;loop&lt;/em&gt;&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Executes code infinitely. Not very helpful, but good to have knowledge about it.&lt;/p&gt;

&lt;h6 id=&quot;conditional-looping-with-loop&quot;&gt;Conditional looping with &lt;em&gt;loop&lt;/em&gt;&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Executes code, exits when condition is met.&lt;/p&gt;

&lt;h4 id=&quot;ruby-break-statement&quot;&gt;Ruby &lt;em&gt;break&lt;/em&gt; statement&lt;/h4&gt;
&lt;p&gt;For terminating the &lt;em&gt;most internal&lt;/em&gt; loop ruby provides &lt;em&gt;break&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;ruby-next-statement&quot;&gt;Ruby &lt;em&gt;next&lt;/em&gt; statement&lt;/h4&gt;
&lt;p&gt;Jumps to next iteration of the most internal loop. Same as &lt;code class=&quot;highlighter-rouge&quot;&gt;continue&lt;/code&gt; in other languages.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;next&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;ruby-redo-statement&quot;&gt;Ruby &lt;em&gt;redo&lt;/em&gt; statement&lt;/h4&gt;
&lt;p&gt;Restarts this iteration of the most internal loop, without checking loop condition.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/ruby&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;redo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will give output as and will in infinite loop.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;i is 0  
i is 0  
.  
.  

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;ruby-retry-statement&quot;&gt;Ruby &lt;em&gt;retry&lt;/em&gt; statement&lt;/h4&gt;
&lt;p&gt;retry appears &lt;em&gt;rescue&lt;/em&gt; clause. Retry starts execution of block from the begin.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;retry&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With &lt;em&gt;begin&lt;/em&gt;, &lt;em&gt;rescue&lt;/em&gt; and &lt;em&gt;end&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#raise exception&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# hanles exception&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;retry&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#restart from the beginning&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
				<pubDate>Mon, 08 Aug 2016 00:00:00 +0530</pubDate>
				<link>/2016/08/08/loops-in-ruby.html</link>
				<guid isPermaLink="true">/2016/08/08/loops-in-ruby.html</guid>
			</item>
		
			<item>
				<title>Introduction To Ruby</title>
				<description>&lt;p&gt;I recently started learning Ruby. My friend once said, ‘The best way to start learning is hands-on and write about it’.
But where to write, hence blog it.&lt;/p&gt;

&lt;p&gt;Yukihiro Matsumoto AKA Matz in mid 1990’s created a scripting language and named it ‘Ruby’.
It is said that&lt;br /&gt;
&lt;strong&gt;Ruby is “A Programmer’s Best Friend”.&lt;/strong&gt;&lt;br /&gt;
Yes, I believe it.&lt;br /&gt;
Features of Ruby&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby is Pure Object-Oriented programming language.&lt;/li&gt;
  &lt;li&gt;Ruby is interpreted language.&lt;/li&gt;
  &lt;li&gt;Ruby is case sensitive.&lt;/li&gt;
  &lt;li&gt;Ruby is a server-side scripting language.&lt;/li&gt;
  &lt;li&gt;Ruby is a general-purpose language.&lt;/li&gt;
  &lt;li&gt;Ruby has clean syntax.&lt;/li&gt;
  &lt;li&gt;Reading Ruby script is like reading English sentence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is no need of indentation in Ruby, but you should follow the convention of two character indentation.&lt;/p&gt;

&lt;p&gt;Lets get started. Lets write first script, I don’t know why but it is always ‘Hello World’. I say go with ‘world’.&lt;br /&gt;
 hello_world.rb&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  
&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/ruby&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello_world&lt;/span&gt;  
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;    
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;      
&lt;span class=&quot;n&quot;&gt;hello_world&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Run this script as :&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ ruby hello_world.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output : &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World! &lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# indicates single line comment  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=begin  
This is the   
multiline comment   
=end  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Installation needed :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Latest version of Ruby&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;irb&lt;/code&gt;(Interactive Ruby Shell) or &lt;code class=&quot;highlighter-rouge&quot;&gt;pry&lt;/code&gt; (same as irb)&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Mon, 01 Aug 2016 00:00:00 +0530</pubDate>
				<link>/2016/08/01/Introduction-to-ruby.html</link>
				<guid isPermaLink="true">/2016/08/01/Introduction-to-ruby.html</guid>
			</item>
		
			<item>
				<title>Retrofit</title>
				<description>&lt;p&gt;&lt;strong&gt;Why Retrofit?&lt;/strong&gt;&lt;br /&gt;
Before using &lt;a href=&quot;http://square.github.io/retrofit/&quot;&gt;Retrofit&lt;/a&gt;, I was searching for HTTP client.  After using Retrofit, my work gets more easy.&lt;/p&gt;

&lt;p&gt;Retrofit is a type-safe HTTP client for Android and Java developed by &lt;a href=&quot;https://square.github.io/&quot;&gt;Square&lt;/a&gt;.  The library provides a powerful framework for authenticating and interacting with APIs and sending network requests with &lt;a href=&quot;https://square.github.io/okhttp&quot;&gt;OkHttp&lt;/a&gt;.&lt;br /&gt;
This library makes downloading JSON or XML data from a web API fairly straightforward. Once the data is downloaded then it is parsed into a Plain Old Java Object (POJO) which must be defined for each “resource” in the response.&lt;/p&gt;

&lt;p&gt;Comparison of Volley and Retrofit :&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;One Discussion&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;25 Discussions&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Volley&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;560ms&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4275ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Retrofit&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;312ms&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1059ms&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Add library to project :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Gradle:&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt; 
    compile &#39;com.squareup.retrofit:retrofit:x.x.x&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Retrofit requires at minimum Java 7 or Android 2.3.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overview:&lt;/strong&gt;&lt;br /&gt;
In Retrofit,we need to create 3 classes.&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;Interface&lt;/strong&gt; : We need to create an interface for managing URL calls like GET,POST etc. This is the service class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@GET(“/path/{id}”)&lt;/strong&gt; : This will call the server. Where URL is form after the BASE URL.The service  calling URL will start with ‘/’ and {id} is the string retrieved from edittext.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@Path(“id”)&lt;/strong&gt; : String ‘id’ is the string which we get from the edittext.&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;POJO (Plain Old Java Object) or Model Class&lt;/strong&gt; : The JSON retrieved from the server is added to this class.&lt;br /&gt;
The JSON from server cannot be use directly in Java,so we need to use model class.&lt;br /&gt;
Use &lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;jsonschema2pojo.org&lt;/a&gt; for creating the POJO easily.&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;RestAdapter Class&lt;/strong&gt; : This is RESTClient Class. Gson is used in default for the Retrofit.You can use setup your own converter.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;API is the Base URL.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We need to create a RestAdapter object with Endpoint(API) and then buid().&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Call the function for getting the response,Callback is used for async method.We need Callback for both success request and error handling.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Our parsed JSON will be now in POJO. You can call each by calling each item.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure to require Internet permissions in your &lt;em&gt;AndroidManifest.xml&lt;/em&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
				<pubDate>Tue, 12 Jan 2016 00:00:00 +0530</pubDate>
				<link>/project/2016/01/12/Retrofit.html</link>
				<guid isPermaLink="true">/project/2016/01/12/Retrofit.html</guid>
			</item>
		
			<item>
				<title>Moving to PhotoView</title>
				<description>&lt;p&gt;It is not like you have to move from &lt;a href=&quot;https://github.com/square/picasso&quot;&gt;Picasso&lt;/a&gt;  to &lt;a href=&quot;https://github.com/chrisbanes/PhotoView&quot;&gt;PhotoView&lt;/a&gt; for image manipulation. Both libraries are for different purposes.&lt;/p&gt;

&lt;p&gt;Picasso is used to load image from file system or download it from internet, you can not perform operations like zooming, tapping on image. PhotoView is used for that purpose.
 Picasso caches the image. This feature is not available in PhotoView.&lt;/p&gt;

&lt;p&gt;Loading is faster with the help of picasso.&lt;/p&gt;

&lt;p&gt;PhotoView can be used along with Picasso.&lt;/p&gt;
</description>
				<pubDate>Tue, 29 Dec 2015 00:00:00 +0530</pubDate>
				<link>/project/2015/12/29/Moving-to-PhotoView.html</link>
				<guid isPermaLink="true">/project/2015/12/29/Moving-to-PhotoView.html</guid>
			</item>
		
			<item>
				<title>DroidCon 2015</title>
				<description>&lt;p&gt;We (me along with my team &lt;a href=&quot;http://chinmay1994.github.io/&quot;&gt;Chinmay&lt;/a&gt; and &lt;a href=&quot;http://sitaramshelke.github.io/&quot;&gt;Sitaram&lt;/a&gt;) have developed a Android application for &lt;a href=&quot;http://www.anujdeshpande.com/&quot;&gt;Anuj’s&lt;/a&gt; talk at &lt;a href=&quot;http://droidcon.in/&quot;&gt;DroidCon-In 2015&lt;/a&gt; to show how we can create context aware navigation experiences using beacons. We have used &lt;a href=&quot;http://estimote.com/&quot;&gt;Estimote beacons&lt;/a&gt; as hardware and their &lt;a href=&quot;https://github.com/Estimote/Android-SDK&quot;&gt;Estimote Android sdk&lt;/a&gt; libraries for the application.&lt;/p&gt;

&lt;p&gt;Beacon is a small transmitting device which continuously transmits  signals at regular intervals within a short range. We have used Estimote beacons with Eddystone which is a protocol specification for defining the beacons message format. Beacon uses Bluetooth low energy i.e. Bluetooth 4.0 AKA Bluetooth Smart.&lt;br /&gt;
For more details about Beacons visit &lt;a href=&quot;http://blog.makerville.io/building-apps-using-eddystone-part-1&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can download the app form Google Play Store &lt;a href=&quot;https://play.google.com/store/apps/details?id=droidcon_phyweb.makerville.com.droidcon_phyweb&amp;amp;hl=en&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will need beacons with Eddystone format to test the app.&lt;/p&gt;

&lt;p&gt;Here are some of the screenshots of the application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ico/droidcon1.png&quot; alt=&quot;&quot; /&gt;    &lt;img src=&quot;/assets/ico/droidcon2.png&quot; alt=&quot;&quot; /&gt;    &lt;img src=&quot;/assets/ico/droidcon3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Its an open source project you can also contribute.&lt;/p&gt;
</description>
				<pubDate>Tue, 15 Dec 2015 00:00:00 +0530</pubDate>
				<link>/contribute/2015/12/15/DroidconIn2015.html</link>
				<guid isPermaLink="true">/contribute/2015/12/15/DroidconIn2015.html</guid>
			</item>
		
			<item>
				<title>Using Picasso</title>
				<description>&lt;p&gt;As a Android app developeryou must have encounter this question: What should I use Picasso or Volley?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;Picasso&lt;/a&gt; is totally focused on image loading. As a result, if you have quirks in your image loading process&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/training/volley/index.html&quot;&gt;Volley&lt;/a&gt;, on the other hand, is totally focused on handling individual, small HTTP requests. So if your HTTP request handling has some quirks, Volley probably has a hook for you. If, on the other hand, you have a quirk in your image handling, the only real hook you have is ImageCache. It’s not nothing, but it’s not a lot, either.but it have more other advantages like Once you define your requests, using them from within a fragment or activity is painless. And unlike parallel AsyncTasks.&lt;/p&gt;

&lt;p&gt;Picasso does just one thing, while Volley tries to solve a more general problem.&lt;/p&gt;

&lt;h4 id=&quot;which-library-should-i-use&quot;&gt;Which Library Should I Use?&lt;/h4&gt;
&lt;p&gt;If you have a large, stable, pre-existing project, you are probably better off using Picasso. Integration is painless, performance seems good, and if the fade-in works for you, you get some free visual fun.&lt;/p&gt;

&lt;p&gt;On the other hand, if your app is new, or if it’s small enough that you can think about swapping out the back end completely, and it deals mostly with small HTTP payloads, Volley is worth considering. Once you define your requests, using them from within a fragment or activity is painless. And unlike parallel AsyncTasks, you don’t have to worry about too many threads.&lt;/p&gt;

&lt;h4 id=&quot;what-about-using-both&quot;&gt;What about using both?&lt;/h4&gt;
&lt;p&gt;If Volley’s image management causes you severe pain, then you’re probably fine using both.&lt;/p&gt;
</description>
				<pubDate>Wed, 02 Dec 2015 00:00:00 +0530</pubDate>
				<link>/project/2015/12/02/PicassoVsVolley.html</link>
				<guid isPermaLink="true">/project/2015/12/02/PicassoVsVolley.html</guid>
			</item>
		
			<item>
				<title>2nd and 3rd Meet</title>
				<description>&lt;p&gt;This was the second week. Week was Heavy, lot many things happened in this week.
Our first meet of the week was with Ninad. He just brushed up our electronics basics. He told us about the communication protocols (&lt;em&gt;SPI -Serial Peripheral Interface&lt;/em&gt; and &lt;em&gt;I2C-Inter-Integrated Circuit&lt;/em&gt;) which are used in serial and parallel devices.
Second meet was with Anuj. He told us about GoLang and its basics, from scratch to running a simple echo server locally. He told us about the pros and cons of Go and other languages(sort of comparison). He also gave us a assignment - Implement data.sparkfun.com without a database i.e. store 4 public/private keys and check if they are valid&lt;/p&gt;
</description>
				<pubDate>Fri, 17 Jul 2015 00:00:00 +0530</pubDate>
				<link>/meet/2015/07/17/Keep-it-GO-ing.html</link>
				<guid isPermaLink="true">/meet/2015/07/17/Keep-it-GO-ing.html</guid>
			</item>
		
			<item>
				<title>The Pentaquark</title>
				<description>&lt;h4 id=&quot;lhc-scientists-discover-new-kind-of-particle-the-pentaquark&quot;&gt;LHC Scientists Discover New Kind of Particle: &lt;em&gt;The Pentaquark&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ico/pentaquark_cern.png&quot; alt=&quot;pentaquark&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Scientists at the &lt;a href=&quot;http://home.web.cern.ch/topics/large-hadron-collider&quot;&gt;Large Hadron Collider&lt;/a&gt; in Switzerland have discovered a new kind of particle called the pentaquark, they announced Tuesday.&lt;/p&gt;

&lt;p&gt;Physicists had theorised the existence of the pentaquark since the 1960s, but had never been able to prove it until its detection by the LHCb experiment at the LHC, the world’s most powerful particle smasher.&lt;/p&gt;

&lt;p&gt;The discovery of the pentaquark comes after the LHC was used in 2012 to prove the existence of another particle, the &lt;em&gt;Higgs Boson&lt;/em&gt;, which confers mass.&lt;/p&gt;

&lt;p&gt;LHCb spokesman Guy Wilkinson said the pentaquark represented a way to combine quarks the sub-atomic particles that make up protons and neutrons “in a pattern that has never been observed before in over 50 years of experimental searches.”&lt;/p&gt;

&lt;p&gt;He added: “Studying its properties may allow us to understand better how ordinary matter, the protons and neutrons from which we’re all made, is constituted.”&lt;/p&gt;

&lt;p&gt;The LHC cranked back up again in June after a two-year upgrade, with scientists hailing a “new era” in their quest to unravel more mysteries of the Universe.&lt;/p&gt;

&lt;p&gt;The new tests at the European Organisation for Nuclear Research (Cern) have twice the energy levels they had during the last three-year experiment phase, when the existence of the &lt;em&gt;Higgs Boson&lt;/em&gt; was confirmed.&lt;/p&gt;

&lt;p&gt;Four laboratories are located along the LHC’s ring-shaped tunnel around a hundred metres (109 yards) underground, where scientists analyse collisions between particles moving at close to the speed of light.&lt;/p&gt;

&lt;p&gt;The LHCb, one of the four experiments, is focused on understanding the differences between matter and anti-matter and analysing certain quarks.&lt;/p&gt;

&lt;p&gt;“Our understanding of the structure of matter was revolutionized in 1964 when American physicist, Murray Gell-Mann, proposed that a category of particles known as baryons, which includes protons and neutrons, are comprised of three fractionally charged objects called quarks,” Cern said in a statement.&lt;/p&gt;

&lt;p&gt;Gell-Mann, who won the Nobel Physics Prize in 1969, further proposed another category of particles, mesons, formed of “quark-antiquark” pairs.&lt;/p&gt;

&lt;p&gt;His model allowed for the existence of other quark combinations such as pentaquarks, which are composed of four quarks and an antiquark. But no conclusive evidence for pentaquarks had been seen until now.&lt;/p&gt;

&lt;p&gt;The LHCb experiment changed the game by allowing scientists to “look for pentaquarks from many perspectives”, Cern said.&lt;/p&gt;

&lt;p&gt;The findings have been submitted to the journal Physical Review Letters.&lt;/p&gt;

&lt;p&gt;The next stage of the research will focus on studying how the quarks are bound together within the pentaquarks, the nuclear laboratory added.&lt;/p&gt;
</description>
				<pubDate>Wed, 15 Jul 2015 00:00:00 +0530</pubDate>
				<link>/science/technical/2015/07/15/the_pentaquark.html</link>
				<guid isPermaLink="true">/science/technical/2015/07/15/the_pentaquark.html</guid>
			</item>
		
	</channel>
</rss>
